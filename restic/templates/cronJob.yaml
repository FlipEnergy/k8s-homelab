apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "restic.fullname" . }}
  labels:
    {{- include "restic.labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  schedule: {{ quote .Values.schedule }}
  successfulJobsHistoryLimit: {{ .Values.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.backoffLimit }}
      template:
        spec:
          restartPolicy: {{ .Values.restartPolicy }}
          volumes:
            - name: source
              persistentVolumeClaim:
                claimName: {{ include "restic.fullname" . }}-source
          securityContext:
            {{- toYaml .Values.podSecurityContext | nindent 12 }}
          containers:
            - name: {{ .Chart.Name }}
              securityContext:
              {{- toYaml .Values.securityContext | nindent 16 }}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              command: ["/bin/sh"]
              args:
                - -c
                - |
                  CURL_CMD='curl --header "Content-Type: application/json" -X POST -d'

                  $CURL_CMD '{"content": "**Back up started** :rocket:"}' "$DISCORD_WEBHOOK_URL"

                  echo "Listing snapshots for [${RESTIC_REPOSITORY}]"
                  echo
                  restic snapshots
                  if [ $? != 0 ]; then
                    echo
                    echo "Restic repository [${RESTIC_REPOSITORY}] does not exists. Running restic init"
                    restic init
                    if [ $? != 0 ]; then
                      echo "Restic repository [${RESTIC_REPOSITORY}] failed to init"
                      exit 1
                    fi
                  fi

                  echo
                  echo "Starting Backup for [${RESTIC_REPOSITORY}]"
                  echo
                  restic backup /source
                  if [ $? != 0 ]; then
                    echo
                    echo "Restic backup [${RESTIC_REPOSITORY}] failed!"
                    $CURL_CMD '{"content": "**Back up failed** :boom:"}' "$DISCORD_WEBHOOK_URL"
                  fi
                  $CURL_CMD '{"content": "**Back up successful** :white_check_mark:"}' "$DISCORD_WEBHOOK_URL"

                  echo
                  echo "Starting snapshot clean up for [${RESTIC_REPOSITORY}]"
                  restic --keep-daily 7 --keep-weekly 4 --keep-monthly 6 --keep-yearly 2 --prune
                  if [ $? != 0 ]; then
                    echo
                    echo "Restic clean up for [${RESTIC_REPOSITORY}] failed!"
                    $CURL_CMD '{"content": "**Clean up failed** :boom:"}' "$DISCORD_WEBHOOK_URL"
                  fi

                  echo
                  echo 'Done!'
              volumeMounts:
                - mountPath: /source
                  name: source
              resources:
                {{- toYaml .Values.resources | nindent 16 }}
              {{- with .Values.env }}
              env:
                {{- range $name, $value := . }}
                - name: {{ quote $name }}
                  value: {{ quote $value }}
                {{- end }}
              {{- end }}
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
